# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

executors:
  vmhost:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: /tmp/procudo
  container:
    docker:
      - image: circleci/python:3.7.4
    working_directory: /tmp/procudo

jobs: 
  init:
    executor: vmhost
    steps:
      - checkout
      - run:
          name: "Install OpenVPN"
          command: |
            sudo apt-get update
            sudo apt-get install openvpn
      - run:
          name: "Install CFSSL"
          command: |
            cd /tmp/
            echo "Installing cfssljson"
            wget https://github.com/cloudflare/cfssl/releases/download/v1.4.1/cfssljson_1.4.1_linux_amd64 -O cfssljson
            sudo mv cfssljson /usr/local/bin/
            sudo chmod +x /usr/local/bin/cfssljson

            echo "Installing cfssl"
            wget https://github.com/cloudflare/cfssl/releases/download/v1.4.1/cfssl_1.4.1_linux_amd64 -O cfssl
            sudo mv cfssl /usr/local/bin/
            sudo chmod +x /usr/local/bin/cfssl
      - run:
          name: "Generate CA, Server and Client Testing Certificates"
          command: |
            mkdir -p data
            cd .cfssl/
            mkdir -p pki/clients
            cfssl genkey --initca conf/openvpn-ca-csr.json | cfssljson -bare pki/ca
            cfssl gencert -ca pki/ca.pem -ca-key pki/ca-key.pem -config conf/openvpn-ca-config.json -profile="server" -hostname="server" conf/openvpn-server-csr.json | cfssljson -bare pki/server
            cfssl gencert -ca pki/ca.pem -ca-key pki/ca-key.pem -config conf/openvpn-ca-config.json -profile="client" -hostname="client" conf/openvpn-client-csr.json | cfssljson -bare pki/clients/client
            openssl genpkey -genparam -algorithm DH -pkeyopt dh_paramgen_prime_len:2048 -out pki/dh2048.pem 
            # openssl genpkey -genparam -algorithm DH -pkeyopt dh_paramgen_prime_len:4096 -out pki/dh4096.pem 
            openvpn --genkey --secret pki/ta.key
      - persist_to_workspace:
          root: /tmp/procudo
          paths:
            - .cfssl/pki


  test:
    executor: container
    steps:  
      - checkout
      - attach_workspace:
          at: /tmp/procudo
      - run:
          name: "Install Dependencies"
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install --no-cache-dir -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: Run Tests
          command: |
            . venv/bin/activate
            mkdir -p data
            cp -r .cfssl/pki/* data/
            coverage run tests.py
            coverage report
            coverage html
            codecov
            ls -la

      # - codecov/upload:
      #     file: {{ coverage_report_filepath }}

      - store_artifacts:
          path: htmlcov
      

  build:
    executor: vmhost
    steps:  
      - setup_remote_docker
      - checkout
      - run:
          name: Build and push Docker image
          command: |
            echo 'export TAG=0.0.1' >> $BASH_ENV
            echo 'export IMAGE_NAME=procudo' >> $BASH_ENV 
            docker build -t toptop/$IMAGE_NAME:$TAG .
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push toptop/$IMAGE_NAME:$TAG
      
workflows:
  version: 2
  workflow:
    jobs:
      - init
      - test:
          requires:
            - init
      - build:
          requires:
            - test


